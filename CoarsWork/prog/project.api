# Objects.hpp
!Objects.cpp Objects.hpp algorithm cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception format fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility wchar.h wctype.h #<#>
!Objects.hpp algorithm cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception format fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility wchar.h wctype.h #<#>
!main.cpp Objects.hpp algorithm cctype cerrno clocale cstdint cstdio cstdlib ctype.h cwchar cwctype errno.h exception format fstream graphics.h initializer_list ios iosfwd iostream istream keys_n_colors.h limits limits.h locale.h new ostream signal.h stddef.h stdexcept stdint.h stdio.h stdlib.h streambuf string string_view system_error time.h type_traits typeinfo utility wchar.h wctype.h #<#>
Arrow _type_ #<Objects.hpp>
Arrow(bool is_allow_change_cordinat, bool is_allow_delete, position coord, position orient) #<Objects.hpp>
COUNFUITS #<Objects.hpp>
COUNTTREE #<Objects.hpp>
Cell : struct #<Objects.hpp>
Cell _type_ #<Objects.hpp>
ChangeColor _type_ #<Objects.hpp>
ChangeColor(bool is_allow_change_cordinat, bool is_allow_delete, position, int color) #<Objects.hpp>
Command _type_ #<Objects.hpp>
Command() #<Objects.hpp>
Command(bool, bool, position) #<Objects.hpp>
Command(const Command& com) #<Objects.hpp>
Exit _type_ #<Objects.hpp>
Exit(bool is_allow_change_cordinat, bool is_allow_delete, position) #<Objects.hpp>
Field _type_ #<Objects.hpp>
Field(int, int) #<Objects.hpp>
Fruit _type_ #<Objects.hpp>
Fruit(IMAGE*) #<Objects.hpp>
HEIGHT_J #<Objects.hpp>
Object _type_ #<Objects.hpp>
Object(IMAGE*) #<Objects.hpp>
Object(const Object& obj) #<Objects.hpp>
Programm _type_ #<Objects.hpp>
Programm(int color) #<Objects.hpp>
Programms : vector #<Objects.hpp>
Robot _type_ #<Objects.hpp>
Robot(IMAGE* img_robot, bool is_allow_change_direction, bool is_allow_change_cordinat) #<Objects.hpp>
Robots : vector #<Objects.hpp>
Robots _type_ #<Objects.hpp>
Task _type_ #<Objects.hpp>
Task(const string) #<Objects.hpp>
Tree _type_ #<Objects.hpp>
Tree(IMAGE*) #<Objects.hpp>
WIDTH_I #<Objects.hpp>
clearWin() -> void #<main.cpp>
color_prog : vector #<Objects.cpp>
direct2grad(position direct) -> int #<Objects.cpp>
drawBarCurrectProg(int i) -> void #<main.cpp>
drawCurrectProg(int n_currect_com, position current_cell) -> void #<main.cpp>
field : Field #<main.cpp>
highlightCell(position current_cell) -> void #<main.cpp>
main() -> int #<main.cpp>
n_currect_com : int #<main.cpp>
operator(const position&, const position&) -> auto #<Objects.hpp>
places_taken : vector #<Objects.cpp>
position _type_ #<Objects.hpp>
position() #<Objects.hpp>
position(const position& pos) #<Objects.hpp>
position(int new_x, int new_y) #<Objects.hpp>
put_text(string text_task) -> void #<main.cpp>
reDraw(string text_task) -> void #<main.cpp>
	Arrow:%orientation : position #<Objects.hpp>
	Arrow:%img : IMAGE* #<Objects.hpp>
	Arrow:%coord : position #<Objects.hpp>
	Arrow::use(Robot&) -> void #<Objects.hpp>
	Arrow::draw(int color) -> void #<Objects.hpp>
	Arrow::set_pos(position) -> void #<Objects.hpp>
	Arrow::get_pos() -> position #<Objects.hpp>
	Arrow::get_allow_pos() -> bool #<Objects.hpp>
	Arrow::use(Robot&) -> virtual void #<Objects.hpp>
	Arrow::draw(int color) -> virtual void #<Objects.hpp>
	Cell::current_object : Object* #<Objects.hpp>
	Cell::color : int #<Objects.hpp>
	ChangeColor:%color : int #<Objects.hpp>
	ChangeColor:%img : IMAGE* #<Objects.hpp>
	ChangeColor:%coord : position #<Objects.hpp>
	ChangeColor::use(Robot&) -> void #<Objects.hpp>
	ChangeColor::draw(int color) -> void #<Objects.hpp>
	ChangeColor::set_pos(position) -> void #<Objects.hpp>
	ChangeColor::get_pos() -> position #<Objects.hpp>
	ChangeColor::get_allow_pos() -> bool #<Objects.hpp>
	ChangeColor::use(Robot&) -> virtual void #<Objects.hpp>
	ChangeColor::draw(int color) -> virtual void #<Objects.hpp>
	Command:%is_allow_change_cordinat : bool #<Objects.hpp>
	Command:%is_allow_delete : bool #<Objects.hpp>
	Command:%img : IMAGE* #<Objects.hpp>
	Command:%coord : position #<Objects.hpp>
	Command::set_pos(position) -> void #<Objects.hpp>
	Command::get_pos() -> position #<Objects.hpp>
	Command::get_allow_pos() -> bool #<Objects.hpp>
	Command::use(Robot&) -> virtual void #<Objects.hpp>
	Command::draw(int color) -> virtual void #<Objects.hpp>
	Exit:%img : IMAGE* #<Objects.hpp>
	Exit:%coord : position #<Objects.hpp>
	Exit::use(Robot&) -> void #<Objects.hpp>
	Exit::draw(int color) -> void #<Objects.hpp>
	Exit::set_pos(position) -> void #<Objects.hpp>
	Exit::get_pos() -> position #<Objects.hpp>
	Exit::get_allow_pos() -> bool #<Objects.hpp>
	Exit::use(Robot&) -> virtual void #<Objects.hpp>
	Exit::draw(int color) -> virtual void #<Objects.hpp>
	Field:%width : int #<Objects.hpp>
	Field:%height : int #<Objects.hpp>
	Field:%fullField : vector #<Objects.hpp>
	Field::set_obj(Object*, position) -> void #<Objects.hpp>
	Field::delete_obj(position) -> void #<Objects.hpp>
	Field::set_color(position, int) -> void #<Objects.hpp>
	Field::draw() -> void #<Objects.hpp>
	Field::get_object(position) -> Object* #<Objects.hpp>
	Field::is_there_fruit() -> bool #<Objects.hpp>
	Fruit:%img : IMAGE* #<Objects.hpp>
	Fruit::draw(position) -> void #<Objects.hpp>
	Fruit::is_access(Robot&) -> bool #<Objects.hpp>
	Fruit::draw(position) -> virtual void #<Objects.hpp>
	Fruit::is_access(Robot&) -> virtual bool #<Objects.hpp>
	Object:%img : IMAGE* #<Objects.hpp>
	Object::draw(position) -> virtual void #<Objects.hpp>
	Object::is_access(Robot&) -> virtual bool #<Objects.hpp>
	Programm:%color : int #<Objects.hpp>
	Programm:%commands : vector #<Objects.hpp>
	Programm::get_col() -> int #<Objects.hpp>
	Programm::add(Command*) -> void #<Objects.hpp>
	Programm::draw() -> void #<Objects.hpp>
	Programm::select(position) -> Command* #<Objects.hpp>
	Programm::delete_com(Command*) -> void #<Objects.hpp>
	Programm::is_collision() -> bool #<Objects.hpp>
	Robot:%img : IMAGE* #<Objects.hpp>
	Robot:%pos : position #<Objects.hpp>
	Robot:%direction : position #<Objects.hpp>
	Robot:%color : int #<Objects.hpp>
	Robot:%allow_change_direction : bool #<Objects.hpp>
	Robot:%allow_change_cordinat : bool #<Objects.hpp>
	Robot::set_cordinat(position) -> void #<Objects.hpp>
	Robot::set_direction(position) -> void #<Objects.hpp>
	Robot::set_color(int) -> void #<Objects.hpp>
	Robot::set_img(IMAGE*) -> void #<Objects.hpp>
	Robot::get_color() -> int #<Objects.hpp>
	Robot::get_cordinat() -> position #<Objects.hpp>
	Robot::get_direction() -> position #<Objects.hpp>
	Robot::change_Field(Field&) -> void #<Objects.hpp>
	Robot::draw() -> void #<Objects.hpp>
	Robot::is_crash : bool #<Objects.hpp>
	Robot::is_collision(Field&, vector& Robots) -> bool #<Objects.hpp>
	Task:%text_task : string #<Objects.hpp>
	Task:%name_taskFile : string #<Objects.hpp>
	Task:%count_robots : int #<Objects.hpp>
	Task:%count_commands : int #<Objects.hpp>
	Task:%count_tree : int #<Objects.hpp>
	Task:%count_fruit : int #<Objects.hpp>
	Task::initialize(Field&, std::vector& Robots, std::vector& Programms) -> void #<Objects.hpp>
	Task::prepare_field(Field&) -> void #<Objects.hpp>
	Task::is_task_completed(Field&, vector& Robots) -> bool #<Objects.hpp>
	Task::get_text_task() -> string #<Objects.hpp>
	Task::draw_an_example() -> void #<Objects.hpp>
	Tree:%img : IMAGE* #<Objects.hpp>
	Tree::draw(position) -> void #<Objects.hpp>
	Tree::is_access(Robot&) -> bool #<Objects.hpp>
	Tree::draw(position) -> virtual void #<Objects.hpp>
	Tree::is_access(Robot&) -> virtual bool #<Objects.hpp>
	position::x : int #<Objects.hpp>
	position::y : int #<Objects.hpp>
