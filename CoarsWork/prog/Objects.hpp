#ifndef OBJECTS_H
#define OBJECTS_H
#include <vector>
#include <string>
#include "graphics.h"

#define WIDTH_I 5
#define HEIGHT_J 5

class Robot;
class Robots;
class Object;
struct Cell;
class Field;
class Сommand;
class Programm;
class Task;

struct position {
   int x, y;
};

class Robot {
   IMAGE *img; // картинка робота
   position coord; //текущие  координаты робота;
   position direction; // текущее направление(смещение по координатам) {0, 1}/{1, 0}/{0, -1}/{-1, 0}
   int color; // текущий цвет
   bool allow_change_direction; // разрешено изменять направление?
   bool allow_change_cordinat; // разрешено изменять координаты?
public:
   Robot(bool, bool); //allow_change_direction, allow_change_cordinat
   ~Robot();
   void set_cordinat(position); // установить координаты
   void set_direction(position); // установить направление
   void set_color(int); // установить цвет
   void change_Field(Field &); // перед выходом из клетки удаление или замена объекта
   void draw();
private:
   bool is_crash(std::vector <Robot *> &Robots); // столкнулся(набор роботов)?
};

class Object {
protected:
   IMAGE *img; // картинка объекта
public:
   Object(IMAGE *);
   ~Object();
   virtual bool is_access(Robot &) = 0; // проверка клетки на доступность для робота
};

class Fruit : public Object {
public:
   Fruit(IMAGE *);
   ~Fruit();
   bool is_access(Robot &);
};

class Tree : public Object {
public:
   Tree(IMAGE *);
   ~Tree();
   bool is_access(Robot &);
};

struct Cell {
   Object *current_object = nullptr; // объект в клетке
   int color = WHITE;
};

class Field {
   int width, height; // размеры поля
   std::vector<std::vector<Cell>> field; //поле из клеток
public:
   Field(int, int); // width, height
   position coord2pos(int, int); // x, y
   void set_obj(Object *, position); // установить объект
   void delete_obj(position); // удалить объект
   void set_color(position, int); // установить цвет
   Object *get_object(position); // получить объкт на клетке
};

class Command {
   position coord;
   bool is_allow_change_cordinat; //разрешено изменять координаты?
   bool is_allow_delete; //разрешено удалять?

   friend class Programm;

protected:
   IMAGE *img;
public:
   Command(bool, bool, position); //is_allow_change_cordinat, is_allow_delete,  x, y
   Command(const Command & com);
   virtual void use(Robot &) = 0;
   virtual void draw(position) = 0; // x, y
};

// "Стрелка", меняющая нарпавление
class Arrow : public Command {
   position orientation;
public:
   // разрешение на пермещение и удаление, позиция расположения, позимещения изменения направления
   Arrow(bool is_allow_change_cordinat, bool is_allow_delete, position coord, position orient);
   void use(Robot &);
   void draw(position) ; // x, y
};

//"Банка с краской", меняющая цвет робота
class ChangeColor : public Command {
   int color;
public:
   ChangeColor(bool, bool, position);
   void use(Robot &);
   void draw(position); // x, y
};

//"Выход", удаляющий робота
class Exit : public Command {
public:
   Exit(bool, bool, position);
   void use(Robot &);
   void draw(position); // x, y
};

class Programm {
   int color = WHITE;
   std::vector<Command*> commands ;
public:
   Programm(int); // color
   int get_col();
   void add(Command *);
   void draw(position);
   Command* select(position); // i, j
};

class Task {
   std::string text_task; // текст задания
   int count_robots;
   int count_programms;
   // инициализация всех компанентов согласно заданию
public:
   Task(const std::string, Field &, std::vector <Robot *> &, std::vector <Programm *>&);// название файла с заданием
   bool is_task_completed(Field &, std::vector <Robot *> &Robots); // проверка на выполненность
   void draw_an_example() {}; // иллюстрирование решения задания(для художника)
};

extern std::vector <Robot *> Robots; // глобальный вектор с роботами
extern std::vector <Programm *> Programms; // глобальный вектор с программами
#endif